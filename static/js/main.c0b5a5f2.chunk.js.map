{"version":3,"sources":["components/Spinner.js","components/Img.js","components/Slide.js","components/Thumbs.js","components/Main.js","components/Slides.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["Spinner","placeholder","className","Img","src","alt","useState","loaded","setLoaded","fallback","onLoad","setTimeout","Slide","id","fields","Helmet","label","key","video","url","playing","loop","playsinline","width","height","config","file","attributes","autoPlay","muted","photo","thumbnails","large","breakpointColumnsObj","default","1100","700","500","Thumbs","props","items","slides","map","slide","index","onClick","path","toggleThumbs","setDirection","setSlide","breakpointCols","columnClassName","Main","current","showThumbs","href","Fetch","res","useFetch","method","fetched","records","forEach","element","undefined","title","str","replace","toLowerCase","from","i","l","length","RegExp","charAt","slugify","history","useHistory","location","useLocation","slideDirection","pathname","pos","findIndex","k","getPos","currentSlide","animated","setAnimated","useEffect","push","routes","exact","match","CSSTransition","in","timeout","classNames","unmountOnExit","e","direction","clientX","view","innerWidth","Slides","basename","process","App","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c0b5a5f2.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Spinner({placeholder}) {\n  return (\n    <div className=\"loader\">\n      <div className=\"spinner\" />\n    </div>\n  );\n}\n\nexport default Spinner;\n","import React, {Suspense, useState} from \"react\";\nimport {Img as Simg} from \"react-suspense-img\";\nimport Spinner from \"./Spinner\";\n\nexport default function Img({src, alt}) {\n  const [loaded, setLoaded] = useState(false);\n\n  let onLoad = () => {\n    setTimeout(() => {\n      setLoaded(true);\n    }, 50);\n  };\n\n  return (\n    <Suspense fallback={<Spinner />}>\n      <Simg\n        src={src}\n        alt={alt}\n        onLoad={onLoad}\n        className={\"slide-visual\" + (loaded ? \" loaded\" : \"\")}\n      />\n    </Suspense>\n  );\n}\n","import React from \"react\";\nimport Img from \"./Img\";\nimport {Helmet} from \"react-helmet\";\nimport ReactPlayer from \"react-player\";\n\nfunction Slide({id, fields}) {\n  /*\n  React.useEffect(() => {\n    //for (var slide of [current, prev, next]) setSlideDisplayed(slide);\n    //preloadImg(prev, next);\n  }, [location]);\n\n  //preloadImg(prev, next);\n\n  function preloadImg() {\n    for (var img of arguments) {\n      if (img.fields && !img.displayed) {\n        console.log(\"preload\");\n        const temp_img = new Image();\n        temp_img.src = img.fields.photo[0].thumbnails.large.url;\n      }\n    }\n  }*/\n\n  return (\n    <>\n      <Helmet>\n        <title>\n          Philippe Fragniere {fields.label ? \" — \" + fields.label : \"\"}\n        </title>\n      </Helmet>\n      <div className=\"slide\">\n        <div\n          className=\"slide-item\"\n          key={id}\n          //  onMouseMove={e => mouseMove(e)}\n        >\n          {fields.video && (\n            <ReactPlayer\n              url={fields.video[0].url}\n              playing={true}\n              loop={true}\n              playsinline={true}\n              width=\"100%\"\n              height=\"100%\"\n              //onClick={unmute}\n              className=\"slide-visual loaded video\"\n              config={{\n                file: {\n                  attributes: {\n                    autoPlay: true,\n                    muted: true\n                  }\n                }\n              }}\n            />\n          )}\n          {fields.photo && !fields.video && (\n            <Img\n              src={fields.photo[0].thumbnails.large.url}\n              alt={fields.label}\n            />\n          )}\n          {!fields.video && !fields.photo && \"No visuals\"}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Slide;\n","import React from \"react\";\nimport Masonry from \"react-masonry-css\";\nimport Img from \"./Img\";\n\nconst breakpointColumnsObj = {\n  default: 9,\n  1100: 6,\n  700: 3,\n  500: 2\n};\n\nfunction Thumbs(props) {\n  function toggleImage(path) {\n    //setDirection(\"fade\");\n    props.toggleThumbs(false);\n    props.setDirection(\"fade\");\n    props.setSlide(path);\n  }\n\n  const items = props.slides.map(function(slide, index) {\n    return (\n      <div\n        className=\"grid-item\"\n        key={slide.id}\n        onClick={() => toggleImage(index)}\n      >\n        {slide.fields.photo ? (\n          <Img\n            src={slide.fields.photo[0].thumbnails.large.url}\n            alt={slide.fields.label}\n          />\n        ) : (\n          \"No visuals\"\n        )}\n      </div>\n    );\n  });\n\n  return (\n    <>\n      <div className=\"gallery\">\n        <div className=\"gallery-content\">\n          <Masonry\n            breakpointCols={breakpointColumnsObj}\n            className=\"grid\"\n            columnClassName=\"grid_column\"\n          >\n            {items}\n          </Masonry>\n        </div>\n      </div>\n    </>\n  );\n}\nexport default Thumbs;\n","import React, {useState} from \"react\";\nimport Thumbs from \"./Thumbs\";\n\nfunction Main({slides, current, setSlide, setDirection}) {\n  //let location = useLocation();\n  const [showThumbs, toggleThumbs] = useState(false);\n  return (\n    <>\n      <div className={showThumbs ? \"white\" : \"\"}>\n        {showThumbs && (\n          <Thumbs\n            slides={slides}\n            toggleThumbs={toggleThumbs}\n            setDirection={setDirection}\n            setSlide={setSlide}\n          />\n        )}\n\n        <div className=\"fixed top-left\">\n          <h1>\n            {showThumbs ? <a href=\"#\">Bookings</a> : \"Philippe Fragnière\"}\n          </h1>\n        </div>\n        <div className=\"fixed top-right\">\n          <h2>\n            <span\n              onClick={() => toggleThumbs(!showThumbs)}\n              className=\"clickable\"\n            >\n              {showThumbs ? \"Close\" : \"More\"}\n            </span>\n          </h2>\n        </div>\n        <div className=\"fixed bottom-left\">\n          {!showThumbs && current.fields.label && current.fields.label}\n        </div>\n      </div>\n    </>\n  );\n}\nexport default Main;\n","import React, {Suspense, useState, useEffect} from \"react\";\nimport {useHistory, useLocation} from \"react-router-dom\";\n\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport useFetch from \"fetch-suspense\";\nimport {CSSTransition} from \"react-transition-group\";\nimport \"../App.scss\";\nimport Slide from \"./Slide\";\nimport Main from \"./Main\";\nimport {slugify} from \"../utils\";\nimport Spinner from \"./Spinner\";\n\nconst Fetch = () => {\n  let res = useFetch(\"https://boiling-bastion-11005.herokuapp.com/\", {\n    method: \"GET\"\n  });\n  if (!res.fetched) {\n    res.records.forEach((element, index) => {\n      if (element.fields.title === undefined)\n        element.fields.title = \"v-\" + element.id;\n      element.path = \"/\" + slugify(element.fields.title);\n    });\n  }\n  let history = useHistory();\n  let location = useLocation();\n\n  const transitionDuration = 800;\n  const [slideDirection, setDirection] = useState(\"fade\");\n  const [currentSlide, setSlide] = useState(getPos());\n  const [animated, setAnimated] = useState(false);\n\n  function getPos() {\n    if (location.pathname !== \"/\") {\n      let pos = res.records.findIndex(k => k.path === location.pathname);\n      return pos >= 0 ? pos : 0;\n    }\n  }\n\n  useEffect(() => {\n    res.fetched = true;\n\n    history.push({\n      pathname: res.records[currentSlide].path\n    });\n  }, [currentSlide, history, res]);\n\n  const handleClick = direction => {\n    setAnimated(true);\n    setTimeout(() => {\n      setAnimated(false);\n    }, transitionDuration);\n\n    if (direction === \"left\") {\n      setSlide(\n        currentSlide - 1 > 0 ? currentSlide - 1 : res.records.length - 1\n      );\n    } else {\n      setSlide(currentSlide + 1 < res.records.length ? currentSlide + 1 : 0);\n    }\n    setDirection(direction);\n  };\n\n  const routes = res.records.map((slide, index) => {\n    return (\n      <Route key={index} exact path={slide.path}>\n        {({match}) => (\n          <CSSTransition\n            in={match != null}\n            timeout={transitionDuration}\n            classNames=\"slide\"\n            unmountOnExit\n          >\n            {<Slide {...slide} />}\n          </CSSTransition>\n        )}\n      </Route>\n    );\n  });\n\n  return (\n    <>\n      <Main\n        slides={res.records}\n        current={res.records[currentSlide]}\n        setDirection={setDirection}\n        setSlide={setSlide}\n      />\n      <div\n        className={\"slider \" + slideDirection + \"-transition\"}\n        onClick={e =>\n          !animated &&\n          handleClick(e.clientX < e.view.innerWidth / 2 ? \"left\" : \"right\")\n        }\n      >\n        {routes}\n      </div>\n    </>\n  );\n};\n\nconst Slides = () => {\n  return (\n    <>\n      <Router basename={process.env.PUBLIC_URL}>\n        <Suspense\n          fallback={\n            <>\n              <div className=\"fixed top-left\">\n                <h1>Philippe Fragnière</h1>\n              </div>\n              <Spinner />\n            </>\n          }\n        >\n          <Fetch />\n        </Suspense>\n      </Router>\n    </>\n  );\n};\n\nexport default Slides;\n","export function slugify(str) {\n  str = str.replace(/^\\s+|\\s+$/g, \"\"); // trim\n  str = str.toLowerCase();\n\n  // remove accents, swap ñ for n, etc\n  var from = \"àáäâèéëêìíïîòóöôùúüûñç·/_,:;\";\n  var to = \"aaaaeeeeiiiioooouuuunc------\";\n  for (var i = 0, l = from.length; i < l; i++) {\n    str = str.replace(new RegExp(from.charAt(i), \"g\"), to.charAt(i));\n  }\n\n  str = str\n    .replace(/[^a-z0-9 -]/g, \"\") // remove invalid chars\n    .replace(/\\s+/g, \"-\") // collapse whitespace and replace by -\n    .replace(/-+/g, \"-\"); // collapse dashes\n\n  return str;\n}\n\nexport function makeTitle(slug) {\n  var words = slug.split(\"-\");\n\n  for (var i = 0; i < words.length; i++) {\n    var word = words[i];\n    words[i] = word.charAt(0) + word.slice(1);\n  }\n\n  return words.join(\" \");\n}\n","import React from \"react\";\nimport Slides from \"./components/Slides\";\n\nfunction App() {\n  return (\n    <>\n      <Slides />\n    </>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./fonts.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}