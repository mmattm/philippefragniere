{"version":3,"sources":["utils.js","components/Spinner.js","components/Img.js","components/Thumbs.js","components/Main.js","components/Slides.js","App.js","serviceWorker.js","index.js"],"names":["slugify","str","replace","toLowerCase","from","i","l","length","RegExp","charAt","Spinner","className","Img","state","loaded","onLoad","setTimeout","setState","this","Suspense","fallback","src","props","alt","React","Component","breakpointColumnsObj","default","1100","700","500","Thumbs","slides","setDirection","toggleThumbs","history","useHistory","items","map","slide","key","id","onClick","path","fields","label","push","pathname","photo","thumbnails","large","url","breakpointCols","columnClassName","Main","showThumbs","location","useLocation","currentRoute","routes","find","route","withLabel","href","Slide","lazy","Slides","onEnter","isAnimated","muted","onExited","direction","slideDirection","setSlideDisplayed","list","s","displayed","fetched","bind","fetch","then","res","json","records","forEach","element","index","undefined","concat","catch","error","console","log","basename","process","exact","to","match","CSSTransition","in","timeout","enter","exit","classNames","unmountOnExit","App","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.aec3a348.chunk.js","sourcesContent":["export function slugify(str) {\n  str = str.replace(/^\\s+|\\s+$/g, \"\"); // trim\n  str = str.toLowerCase();\n\n  // remove accents, swap ñ for n, etc\n  var from = \"àáäâèéëêìíïîòóöôùúüûñç·/_,:;\";\n  var to = \"aaaaeeeeiiiioooouuuunc------\";\n  for (var i = 0, l = from.length; i < l; i++) {\n    str = str.replace(new RegExp(from.charAt(i), \"g\"), to.charAt(i));\n  }\n\n  str = str\n    .replace(/[^a-z0-9 -]/g, \"\") // remove invalid chars\n    .replace(/\\s+/g, \"-\") // collapse whitespace and replace by -\n    .replace(/-+/g, \"-\"); // collapse dashes\n\n  return str;\n}\n\nexport function makeTitle(slug) {\n  var words = slug.split(\"-\");\n\n  for (var i = 0; i < words.length; i++) {\n    var word = words[i];\n    words[i] = word.charAt(0) + word.slice(1);\n  }\n\n  return words.join(\" \");\n}\n","import React from \"react\";\n\nfunction Spinner() {\n  return (\n    <div className=\"loader\">\n      <div className=\"spinner\" />\n    </div>\n  );\n}\n\nexport default Spinner;\n","import React, {Suspense} from \"react\";\nimport {Img as Simg, resource} from \"react-suspense-img\";\nimport Spinner from \"./Spinner\";\n\nexport default class Img extends React.Component {\n  state = {loaded: false};\n\n  onLoad = () => {\n    setTimeout(() => {\n      this.setState({loaded: true});\n    }, 50);\n  };\n\n  render() {\n    const {loaded} = this.state;\n\n    return (\n      <React.Suspense fallback=<Spinner />>\n        <Simg\n          src={this.props.src}\n          alt={this.props.alt}\n          onLoad={this.onLoad}\n          className={\"slide-visual\" + (loaded ? \" loaded\" : \"\")}\n        />\n      </React.Suspense>\n    );\n  }\n}\n","import React from \"react\";\nimport Masonry from \"react-masonry-css\";\nimport Img from \"./Img\";\nimport {slugify} from \"../utils\";\n\nimport {useHistory} from \"react-router-dom\";\n\nconst breakpointColumnsObj = {\n  default: 9,\n  1100: 6,\n  700: 3,\n  500: 2\n};\n\nfunction Thumbs({slides, setDirection, toggleThumbs}) {\n  let history = useHistory();\n\n  function toggleImage(path) {\n    setDirection(\"fade\");\n    history.push({\n      pathname: path,\n      state: {}\n    });\n    toggleThumbs();\n  }\n\n  const items = slides.map(function(slide) {\n    return (\n      <div\n        className=\"grid-item\"\n        key={slide.id}\n        onClick={() => toggleImage(\"/\" + slugify(slide.fields.label))}\n      >\n        {slide.fields.photo ? (\n          <Img\n            src={slide.fields.photo[0].thumbnails.large.url}\n            alt={slide.fields.label}\n          />\n        ) : (\n          \"No visuals\"\n        )}\n      </div>\n    );\n  });\n\n  return (\n    <>\n      <div className=\"gallery\">\n        <div className=\"gallery-content\">\n          <Masonry\n            breakpointCols={breakpointColumnsObj}\n            className=\"grid\"\n            columnClassName=\"grid_column\"\n          >\n            {items}\n          </Masonry>\n        </div>\n      </div>\n    </>\n  );\n}\nexport default Thumbs;\n","import React from \"react\";\nimport {useLocation} from \"react-router-dom\";\nimport Thumbs from \"./Thumbs\";\n\nfunction Main({state, showThumbs, toggleThumbs, setDirection}) {\n  let location = useLocation();\n\n  function currentRoute() {\n    return state.routes.find(function(route) {\n      return route.path === location.pathname;\n    });\n  }\n\n  let label = \"Loading\";\n  if (currentRoute()) {\n    if (currentRoute().slide)\n      label = currentRoute().slide.fields.withLabel\n        ? currentRoute().slide.fields.label\n        : \"\";\n  }\n\n  return (\n    <>\n      <div className={showThumbs ? \"white\" : \"\"}>\n        {showThumbs ? (\n          <Thumbs\n            slides={state.slides}\n            setDirection={setDirection}\n            toggleThumbs={toggleThumbs}\n          />\n        ) : null}\n        <div className=\"fixed top-left\">\n          <h1>\n            {showThumbs ? <a href=\"#\">Bookings</a> : \"Philippe Fragnière\"}\n          </h1>\n        </div>\n        <div className=\"fixed top-right\">\n          <h2>\n            <span onClick={toggleThumbs} className=\"clickable\">\n              {showThumbs ? \"Close\" : \"More\"}\n            </span>\n          </h2>\n        </div>\n        <div className=\"fixed bottom-left\">\n          {showThumbs ? null : <h2>{label}</h2>}\n        </div>\n      </div>\n    </>\n  );\n}\nexport default Main;\n","import React, {Suspense} from \"react\";\nimport {BrowserRouter as Router, Route, Redirect} from \"react-router-dom\";\n\nimport {CSSTransition} from \"react-transition-group\";\nimport \"../App.scss\";\n//import Slide from \"./Slide\";\nimport Main from \"./Main\";\nimport {slugify} from \"../utils\";\nimport Spinner from \"./Spinner\";\n\nconst Slide = React.lazy(() => import(\"./Slide\"));\n\nexport default class Slides extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      routes: [],\n      slides: [],\n      isAnimated: false,\n      slideDirection: \"fade\",\n      showThumbs: false,\n      fetched: false,\n      muted: true\n    };\n    this.onEnter = this.onEnter.bind(this);\n    this.onExited = this.onExited.bind(this);\n    this.setDirection = this.setDirection.bind(this);\n    this.toggleThumbs = this.toggleThumbs.bind(this);\n    this.setSlideDisplayed = this.setSlideDisplayed.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://boiling-bastion-11005.herokuapp.com/\")\n      .then(res => res.json())\n      .then(res => {\n        // ID slug instead of empty label\n        res.records.forEach((element, index) => {\n          element.fields.withLabel = true;\n          if (element.fields.label === undefined) {\n            element.fields.label = \"v-\" + element.id;\n            element.fields.withLabel = false;\n          }\n        });\n        this.setState({slides: res.records});\n\n        for (var slide of res.records) {\n          this.setState({\n            routes: this.state.routes.concat({\n              path: \"/\" + slugify(slide.fields.label),\n              slide: slide,\n              displayed: false\n            }),\n            slides: res.records,\n            isAnimated: false,\n            fetched: true\n          });\n        }\n      })\n      .catch(error => console.log(error));\n  }\n\n  onEnter = () => {\n    this.setState({\n      isAnimated: true,\n      muted: false\n    });\n  };\n  onExited = () => {\n    this.setState({\n      isAnimated: false,\n      muted: false\n    });\n  };\n  setDirection = direction => {\n    this.setState({\n      slideDirection: direction\n    });\n  };\n  toggleThumbs = () => {\n    this.setState({\n      showThumbs: !this.state.showThumbs\n    });\n  };\n  setSlideDisplayed = slide => {\n    this.setState(state => {\n      const list = state.slides.map(s =>\n        s === slide ? (slide.displayed = true) : null\n      );\n      return {\n        list\n      };\n    });\n  };\n\n  render() {\n    const {routes, slideDirection} = this.state;\n\n    return (\n      <>\n        <Router basename={process.env.PUBLIC_URL}>\n          <Route exact path=\"/\">\n            {routes[0] ? (\n              <Redirect\n                push={true}\n                to={{pathname: routes[0].path, state: {}}}\n              />\n            ) : null}\n          </Route>\n\n          <Main\n            state={this.state}\n            showThumbs={this.state.showThumbs}\n            toggleThumbs={this.toggleThumbs}\n            setDirection={this.setDirection}\n          />\n          <div className={\"slider \" + slideDirection + \"-transition\"}>\n            {routes.map(({path, slide}) => (\n              <Route key={path} exact path={path}>\n                {({match}) => (\n                  <CSSTransition\n                    in={match != null}\n                    timeout={{enter: 800, exit: 800}}\n                    classNames=\"slide\"\n                    onEnter={this.onEnter}\n                    onExited={this.onExited}\n                    unmountOnExit\n                  >\n                    {\n                      <Suspense fallback={<Spinner />}>\n                        <Slide\n                          {...slide}\n                          slides={this.state.slides}\n                          isAnimated={this.state.isAnimated}\n                          setDirection={this.setDirection}\n                          setSlideDisplayed={this.setSlideDisplayed}\n                          muted={this.state.muted}\n                        />\n                      </Suspense>\n                    }\n                  </CSSTransition>\n                )}\n              </Route>\n            ))}\n          </div>\n        </Router>\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport Slides from \"./components/Slides\";\n\nfunction App() {\n  return (\n    <>\n      <Slides />\n    </>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./fonts.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}